import numpy as np
import matplotlib.pyplot as plt
X = np.array([52.50234527, 63.42680403, 81.53035803, 47.47563963, 89.81320787,
               55.14218841, 52.21179669, 39.29956669, 48.10504169, 52.55001444,
               45.41973014, 54.35163488, 44.1640495, 58.16847072, 56.72720806,
               48.95588857, 44.68719623, 60.29732685, 45.61864377, 38.81681754])
Y = np.array([41.70700585, 78.77759598, 82.5623823, 91.54663223, 77.23092513,
               78.21151827, 79.64197305, 59.17148932, 75.3312423, 71.30087989,
               55.16567715, 82.47884676, 62.00892325, 75.39287043, 81.43619216,
               60.72360244, 82.89250373, 97.37989686, 48.84715332, 56.87721319])
iterations, learning_rate, stopping_threshold = 2000, 0.0001, 1e-6
theta = np.array([0.1, 0.01])
X_b = np.c_[np.ones_like(X), X]
costs, weights = [], []
for i in range(iterations):
    y_pred = X_b.dot(theta)
    cost = np.mean((y_pred - Y)**2)
    if i > 0 and abs(costs[-1] - cost) < stopping_threshold:
        break
    costs.append(cost)
    weights.append(theta[0])
    theta -= learning_rate * (2/len(Y)) * X_b.T.dot(y_pred - Y)
plt.figure(figsize=(8, 6))
plt.plot(weights, costs, marker='o', color='red')
plt.title("Cost vs Weights")
plt.ylabel("Cost")
plt.xlabel("Weight")
plt.show()
print(f"Estimated Weight: {theta[1]}\nEstimated Bias: {theta[0]}")
Y_pred = X_b.dot(theta)
plt.figure(figsize=(8, 6))
plt.scatter(X, Y, marker='o', color='black')
plt.plot(X, Y_pred, color='blue', linestyle='dashed')
plt.xlabel("X")
plt.ylabel("Y")
plt.show()
